{
  "Test button": {
    "prefix": "test",
    "body": [
      "<button style={{ border: 'solid red', padding: 3 }} onClick={() => {",
      "\tconsole.log($0);",
      "}}>‚ùóTEST</button>"
    ]
  },
  "Create react context": {
    "prefix": "template-create-context",
    "body": [
      "import React, { useContext, useMemo } from 'react';",
      "",
      "interface I${1:Test}Context {",
      "\t${2:state}: unknown;",
      "}",
      "export const ${1:Test}Context = React.createContext<I${1:Test}Context | null>(null);",
      "",
      "export const use${1:Test}Context = () => {",
      "\tconst context = useContext(${1:Test}Context);",
      "\tif (!context) throw new Error('${1:Test}Context is not set.');",
      "\treturn context;",
      "}",
      "",
      "const ${1/(.*)/${1:/camelcase}/}Value: I${1:Test}Context = useMemo(",
      "\t() => ({",
      "\t\t${2:state},",
      "\t}),",
      "\t[${2:state}]",
      ");",
      "",
      "return (",
      "\t<${1:Test}Context.Provider value={${1/(.*)/${1:/camelcase}/}Value}>",
      "\t\t$0",
      "\t</${1:Test}Context.Provider>",
      ");"
    ]
  },
  "Create react reducer with context": {
    "prefix": "template-create-reducer-context",
    "body": [
      "import React, { useContext, useMemo, useReducer } from 'react';",
      "",
      "interface ${1:State} {",
      "\tdata: string;",
      "}",
      "",
      "type $1Action = { type: 'reset' } | { type: 'set'; payload: string };",
      "",
      "interface I$1Context {",
      "\t${1/(.*)/${1:/camelcase}/}: $1;",
      "\t${1/(.*)/${1:/camelcase}/}Dispatch: React.Dispatch<$1Action>;",
      "}",
      "const $1Context = React.createContext<I$1Context | null>(null);",
      "",
      "const initialState: $1 = { data: '' };",
      "",
      "const ${1/(.*)/${1:/camelcase}/}Reducer: React.Reducer<$1, $1Action> = (state, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase 'reset': {",
      "\t\t\treturn initialState;",
      "\t\t}",
      "",
      "\t\tcase 'set': {",
      "\t\t\treturn { ...state, data: action.payload };",
      "\t\t}",
      "\t}",
      "};",
      "",
      "export const $1Provider: React.FC = (props) => {",
      "\tconst [${1/(.*)/${1:/camelcase}/}, ${1/(.*)/${1:/camelcase}/}Dispatch] = useReducer(${1/(.*)/${1:/camelcase}/}Reducer, initialState);",
      "\tconst contextValue: I$1Context = useMemo(() => ({ ${1/(.*)/${1:/camelcase}/}, ${1/(.*)/${1:/camelcase}/}Dispatch }), [",
      "\t\t${1/(.*)/${1:/camelcase}/},",
      "\t]);",
      "",
      "\treturn (",
      "\t\t<$1Context.Provider value={contextValue}>{props.children}</$1Context.Provider>",
      "\t);",
      "};",
      "",
      "export const use$1 = () => {",
      "\tconst context = useContext($1Context);",
      "\tif (!context) throw new Error('$1Context is not set.');",
      "\treturn context;",
      "}"
    ]
  },
  "Improved react functional component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props {",
      "",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}: React.FC<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props> = (props) => {",
      "\tconsole.count(\"${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} rerender\");",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$0",
      "\t\t</>",
      "\t)",
      "}",
      ""
    ]
  },
  "Jest react component": {
    "prefix": "template-jest-react-component",
    "body": [
      "import { fireEvent, render, waitFor } from '@testing-library/react';",
      "import React, { ComponentProps } from 'react';",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props = ComponentProps<typeof ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}>",
      "",
      "const render${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} = (",
      "\toverrideProps: Partial<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props> = {}",
      ") => {",
      "\tconst props: jest.Mocked<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props> = Object.assign<",
      "\t\t${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props,",
      "\t\tPartial<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props>",
      "\t>(",
      "\t\t{",
      "\t\t\t$0",
      "\t\t},",
      "\t\toverrideProps",
      "\t);",
      "\tconst component = render(<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {...props}/>);",
      "\treturn { component, props };",
      "};",
      "",
      "describe('<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} /> spec', () => {",
      "\tit('should display texts', () => {",
      "\t\tconst { component } = render${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}();",
      "\t\tfireEvent.click(component.getByLabelText('run'));",
      "\t\texpect(component.getByText('text')).toBeInTheDocument();",
      "\t\texpect(component.container).toMatchSnapshot();",
      "\t});",
      "});"
    ]
  },
  "Jest waitFor": {
    "prefix": "waitFor",
    "body": ["await waitFor(() => {", "\t$0", "});"]
  }
}
