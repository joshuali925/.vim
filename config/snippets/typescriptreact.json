{
  "Log": {
    "prefix": "cl",
    "body": ["console.log('DEBUGGING ❗$0:', $0);"]
  },
  "Log stringify": {
    "prefix": "cls",
    "body": [
      "console.log('DEBUGGING ❗$0:');",
      "console.log(JSON.stringify($0, null, 2);"
    ]
  },
  "Logger": {
    "prefix": "logger",
    "body": [
      "const log = (...args) => console.log(`[\\${new Date().toISOString()}]`, ...args);"
    ]
  },
  "Random string": {
    "prefix": "randomstring",
    "body": [
      "const randString = () => Math.random().toString(36).substring(2);"
    ]
  },
  "Random integer": {
    "prefix": "randomint",
    "body": [
      "const randint = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);"
    ]
  },
  "Empty arrow function": {
    "prefix": "arrow",
    "body": ["() => { }"]
  },
  "Promise then": {
    "prefix": "then",
    "body": [
      ".then((resp) => {",
      "  $0",
      "})",
      ".catch((error) => {",
      "  $0",
      "})"
    ]
  },
  "Promise then log": {
    "prefix": "thenlog",
    "body": [".then((resp) => {", "  console.log(resp);", "})"]
  },
  "useState": {
    "prefix": "useState",
    "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($0);"]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": ["useEffect(() => {", "  $0", "}, []);"]
  },
  "Test EuiButton": {
    "prefix": "test",
    "body": [
      "<button style={{ border: 'solid red', padding: 3 }} onClick={() => {",
      "  console.log($0);",
      "}}>TEST</button>"
    ]
  },
  "Props": {
    "prefix": "props",
    "body": "$0={$0}"
  },
  "Props get set type": {
    "prefix": "propsgettersetter",
    "body": [
      "${1:state}: ${0:string};",
      "set${1/(.*)/${1:/capitalize}/}: (${1:state}: ${0:string}) => void;"
    ]
  },
  "Improved react functional component": {
    "prefix": "rfc",
    "body": [
      "/*",
      " * Copyright OpenSearch Contributors",
      " * SPDX-License-Identifier: Apache-2.0",
      " */",
      "",
      "",
      "import React from 'react';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "",
      "}",
      "",
      "export function ${1:${TM_FILENAME_BASE}}(props: ${1:${TM_FILENAME_BASE}}Props) {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$0",
      "\t\t</>",
      "\t)",
      "}",
      ""
    ]
  },
  "Jest template": {
    "prefix": "jest",
    "body": [
      "/*",
      " * Copyright OpenSearch Contributors",
      " * SPDX-License-Identifier: Apache-2.0",
      " */",
      "",
      "import { fireEvent, render } from '@testing-library/react';",
      "import { configure, mount, shallow } from 'enzyme';",
      "import Adapter from 'enzyme-adapter-react-16';",
      "import React from 'react';",
      "",
      "describe('<${TM_FILENAME_BASE/(.*).test$/$1/} /> spec', () => {",
      "  configure({ adapter: new Adapter() });$0",
      "",
      "  it('renders the component', () => {",
      "    const utils = render(",
      "      <${TM_FILENAME_BASE/(.*).test$/$1/} ",
      "",
      "      />",
      "    );",
      "    expect(utils.container.firstChild).toMatchSnapshot();",
      "  });",
      "",
      "});",
      ""
    ]
  },
  "Jest fn": {
    "prefix": "jestfn",
    "body": ["const $0 = jest.fn();"]
  },
  "Jest waitfor": {
    "prefix": "waitfor",
    "body": ["await waitFor(() => {", "  $0", "});"]
  }
}
