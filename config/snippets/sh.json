{
  "Bash template": {
    "prefix": "template",
    "body": ["#!/usr/bin/env bash", "set -eo pipefail", "", "$0"]
  },
  "Array": {
    "prefix": "array",
    "body": "\"\\${${1:array}[@]}\"$0"
  },
  "Benchmark": {
    "prefix": "benchmark",
    "body": [
      "begin=\\$(( \\${EPOCHREALTIME/[^0-9]/} / 1000 ))",
      "$0",
      "echo Took: \\$((\\$(( \\${EPOCHREALTIME/[^0-9]/} / 1000 )) - begin)) ms"
    ]
  },
  "If": {
    "prefix": "if",
    "body": ["if [[ $1 ]]; then", "\t$0", "fi"]
  },
  "If variable equals": {
    "prefix": "if-var",
    "body": ["if [[ \\$${1:VAR} = '${2:STRING}' ]]; then", "\t$0", "fi"]
  },
  "If command succeeds": {
    "prefix": "if-command",
    "body": ["if ${1:grep -q text <<< \"\\$VAR\"}; then", "\t$0", "fi"]
  },
  "If command does not exist": {
    "prefix": "if-command-not-exists",
    "body": [
      "if ! builtin command -v ${1:cmd} > /dev/null 2>&1; then",
      "\t$0",
      "fi"
    ]
  },
  "If variable exists": {
    "prefix": "if-var-exists",
    "body": ["if [[ -n \\$${1:VAR} ]]; then", "\t$0", "fi"]
  },
  "If glob": {
    "prefix": "if-glob",
    "body": ["if [[ \\$${1:VAR} = *${2:STRING}* ]]; then", "\t$0", "fi"]
  },
  "If regex": {
    "prefix": "if-regex",
    "body": [
      "if [[ \\$${1:VAR} =~ ${2:^([0-9]{10\\}|[a-z]{5\\})\\$} ]]; then",
      "\t$0",
      "fi"
    ]
  },
  "If no arguments": {
    "prefix": "if-no-arguments",
    "body": [
      "if [[ \\$# -eq 0 ]]; then",
      "\techo \"Usage: \\$0 <args>\" >&2",
      "\texit 1$0",
      "fi"
    ]
  },
  "If array is empty": {
    "prefix": "if-array-empty",
    "body": ["if [[ \\${#${1:array}[@]} -eq 0 ]]; then", "\t$0", "fi"]
  },
  "If array contains regex": {
    "prefix": "if-array-contains-regex",
    "body": [
      "if printf '%s\\0' \"\\${${1:array}[@]}\" | grep -q -x -z -F -- '${2:value}'; then",
      "\t$0",
      "fi"
    ]
  },
  "If array contains glob": {
    "prefix": "if-array-contains",
    "body": [
      "if [[ \\${${1:array}[*]} = *${2:glob}* ]]; then",
      "\t$0",
      "fi"
    ]
  },
  "If variable equals ignore case": {
    "prefix": "if-equals-ignore-case",
    "body": [
      "if [[ \\$(tr '[:upper:]' '[:lower:]' <<< \"\\$${1:VAR}\") = '${2:string}' ]]; then",
      "\t$0",
      "fi"
    ]
  },
  "Else if": {
    "prefix": "elseif",
    "body": ["elif [[ ${1:\\$VAR = 'STRING'} ]]; then", "\t$0"]
  },
  "For each element in array": {
    "prefix": "foreach",
    "body": ["for ${1:element} in \"${2:\\${array[@]\\}}\"; do", "\t$0", "done"]
  },
  "For i in range": {
    "prefix": "for-range",
    "body": ["for ${1:i} in {1..${2:10}}; do", "\t$0", "done"]
  },
  "For each argument": {
    "prefix": "for-arg",
    "body": ["for ${1:arg} in \"\\$@\"; do", "\t$0", "done"]
  },
  "While argument": {
    "prefix": "while-arg",
    "body": ["while [[ \\$# -ne 0 ]]; do", "\t$0", "\tshift", "done"]
  },
  "Loop lines": {
    "prefix": "while-read",
    "body": [
      "while IFS= read -r line; do",
      "\techo \"\\$line\"",
      "done <<< \"\\$${0:list}\""
    ]
  },
  "Case": {
    "prefix": "case",
    "body": [
      "case ${1:\\$(tr '[:upper:]' '[:lower:]' <<< \"\\$1\")} in",
      "\t${3:-h|--help})",
      "\t\t$0",
      "\t\t;;",
      "\t--) shift; break ;;",
      "\t*) echo \"Unsupported argument \\$${2:1}, exiting..\" >&2; exit 1 ;;",
      "esac"
    ]
  },
  "Variable with default value": {
    "prefix": "var-default-value",
    "body": "\"\\${${1:VAR}:-${0:default}}\""
  },
  "Substring of variable": {
    "prefix": "var-substring",
    "body": "\"\\${${1:VAR}:${2:offset}:${0:length}}\""
  },
  "Length of variable": {
    "prefix": "var-length",
    "body": "\"\\${#${0:VAR}}\""
  },
  "Remove first match in variable": {
    "prefix": "var-remove-first-match",
    "body": "\"\\${${1:VAR}#${0:pattern}}\""
  },
  "Remove first match in variable greedy": {
    "prefix": "var-remove-first-match-greedy",
    "body": "\"\\${${1:VAR}##${0:pattern}}\""
  },
  "Remove last match in variable": {
    "prefix": "var-remove-last-match",
    "body": "\"\\${${1:VAR}%${0:pattern}}\""
  },
  "Remove last match in variable greedy": {
    "prefix": "var-remove-last-match-greedy",
    "body": "\"\\${${1:VAR}%%${0:pattern}}\""
  },
  "Substitute first match in variable": {
    "prefix": "var-replace",
    "body": "\"\\${${1:VAR}/${2:pattern}/${0:str}}\""
  },
  "Substitute all matches in variable": {
    "prefix": "var-replace-all",
    "body": "\"\\${${1:VAR}//${2:pattern}/${0:str}}\""
  },
  "Keep everything before last slash": {
    "prefix": "var-dirname",
    "body": "\\${${1:VAR}%/*}$0"
  },
  "Keep everything after last slash": {
    "prefix": "var-basename",
    "body": "\\${${1:VAR}##*/}$0"
  },
  "Keep everything before last dot": {
    "prefix": "var-no-extension",
    "body": "\\${${1:VAR}%.*}$0"
  },
  "Keep everything after last dot": {
    "prefix": "var-extension",
    "body": "\\${${1:VAR}##*.}$0"
  },
  "Redirect to null": {
    "prefix": "redir-null",
    "body": "> /dev/null 2>&1"
  },
  "Redirect to stderr": {
    "prefix": "redir-err",
    "body": ">&2"
  },
  "Redirect stderr to null": {
    "prefix": "redir-error-null",
    "body": "2> /dev/null"
  },
  "Redirect stderr to stdin": {
    "prefix": "redir-error-stdin",
    "body": "2>&1"
  },
  "Script directory": {
    "prefix": "script-directory",
    "body": "SCRIPT_DIR=\"\\$(cd -- \"\\$(dirname -- \"\\${BASH_SOURCE[0]:-\\$0}\")\" &> /dev/null && pwd 2> /dev/null)\""
  },
  "Log": {
    "prefix": "log",
    "body": "printf \"\\033[0;36m%s\\033[0m\\n\" \"$0\" >&2"
  },
  "Trap": {
    "prefix": "trap",
    "body": "trap ${0:cleanup} TERM INT EXIT"
  },
  "iSO date": {
    "prefix": "date-iso",
    "body": "date -u +'%Y-%m-%dT%H:%M:%SZ'"
  },
  "Find files and exec": {
    "prefix": "find-exec",
    "body": "find . -iname '${1:*.txt}' -print -exec ${0:file {\\} \\; -exec sleep 1} \\;"
  },
  "Prompt yes or no (default yes)": {
    "prefix": "prompt-yes-no",
    "body": [
      "printf '${1:Continue} (Y/n)? '",
      "read -r REPLY",
      "if [[ -z \\$REPLY ]] || [[ \\$REPLY != \"\\${REPLY#[Yy]}\" ]]; then",
      "\t${0:echo Yes}",
      "fi"
    ]
  },
  "Prompt yes or no (default no)": {
    "prefix": "prompt-yes-no-default-no",
    "body": [
      "printf '${1:Continue} (y/N)? '",
      "read -r REPLY",
      "if [[ \\$REPLY = [Yy] ]]; then",
      "\t${0:echo Yes}",
      "fi"
    ]
  },
  "Read one character": {
    "prefix": "prompt-one-key",
    "body": [
      "read -p '${1:To abort press n.}' -n 1; echo",
      "if [[ \\$REPLY != \"\\${REPLY#[Nn]}\" ]]; then",
      "\t${0:exit 0}",
      "fi"
    ]
  }
}
