{
  "Bash template": {
    "prefix": "template",
    "body": ["#!/usr/bin/env bash", "set -eo pipefail", "", "$0"]
  },
  "If": {
    "prefix": "if",
    "body": ["if [ ${1:\"\\$VAR\" = 'STRING'} ]; then", "  $0", "fi"]
  },
  "If command succeeds": {
    "prefix": "ifcommand",
    "body": ["if ${1:grep -q text <<< \"\\$VAR\"}; then", "  $0", "fi"]
  },
  "If command does not exist": {
    "prefix": "ifcommandnotexists",
    "body": [
      "if ! builtin command -v ${1:cmd} > /dev/null 2>&1; then",
      "  $0",
      "fi"
    ]
  },
  "If variable exists": {
    "prefix": "ifvarexists",
    "body": ["if [ -n \"\\$${1:VAR}\" ]; then", "  $0", "fi"]
  },
  "If glob": {
    "prefix": "ifglob",
    "body": ["if [[ \\$${1:VAR} = *${2:STRING}* ]]; then", "  $0", "fi"]
  },
  "If regex": {
    "prefix": "ifregex",
    "body": [
      "if [[ \\$${1:VAR} =~ ${2:^([0-9]{10\\}|[a-z]{5\\})\\$} ]]; then",
      "  $0",
      "fi"
    ]
  },
  "If no arguments": {
    "prefix": "ifnoarguments",
    "body": [
      "if [ \"\\$#\" -eq 0 ]; then",
      "  echo \"Usage: \\$0 <args>\"",
      "  exit 1$0",
      "fi"
    ]
  },
  "If array is empty": {
    "prefix": "ifarrayempty",
    "body": ["if [ \\${#${1:array}[@]} -eq 0 ]; then", "  $0", "fi"]
  },
  "If variable equals ignore case": {
    "prefix": "ifEqualsIgnoreCase",
    "body": [
      "if [ \"\\$(tr '[:upper:]' '[:lower:]' <<< \"\\$${1:VAR}\")\" = '${2:string}' ]; then",
      "  $0",
      "fi"
    ]
  },
  "Else if": {
    "prefix": "elseif",
    "body": ["elif [ ${1:\"\\$VAR\" = 'STRING'} ]; then", "  $0"]
  },
  "For each element in array": {
    "prefix": "foreach",
    "body": ["for ${1:element} in \"${2:\\${array[@]\\}}\"; do", "  $0", "done"]
  },
  "For i in range": {
    "prefix": "forRange",
    "body": ["for ${1:i} in {1..${2:10}}; do", "  $0", "done"]
  },
  "Loop lines": {
    "prefix": "whileread",
    "body": [
      "while IFS= read -r line; do",
      "  echo \"... \\$line ...\"",
      "done <<< \"\\$${0:list}\""
    ]
  },
  "Case": {
    "prefix": "case",
    "body": [
      "case ${1:\\$(tr '[:upper:]' '[:lower:]' <<< \"\\$1\")} in",
      "  ${3:help})",
      "    $0",
      "    ;;",
      "  *) echo \"Unsupported argument \\$${2:1}, exiting..\" >&2; exit 1 ;;",
      "esac"
    ]
  },
  "Variable with default value": {
    "prefix": "varDefaultValue",
    "body": "\"\\${${1:VAR}:-'${0:default}'}\""
  },
  "Substring of variable": {
    "prefix": "varSubstring",
    "body": "\"\\${${1:VAR}:${2:offset}:${0:length}}\""
  },
  "Length of variable": {
    "prefix": "varLength",
    "body": "\"\\${#${0:VAR}}\""
  },
  "Remove first match in variable": {
    "prefix": "varRemoveFirstMatch",
    "body": "\"\\${${1:VAR}#${0:pattern}}\""
  },
  "Remove first match in variable greedy": {
    "prefix": "varRemoveFirstMatchGreedy",
    "body": "\"\\${${1:VAR}##${0:pattern}}\""
  },
  "Remove last match in variable": {
    "prefix": "varRemoveLastMatch",
    "body": "\"\\${${1:VAR}%${0:pattern}}\""
  },
  "Remove last match in variable greedy": {
    "prefix": "varRemoveLastMatchGreedy",
    "body": "\"\\${${1:VAR}%%${0:pattern}}\""
  },
  "Substitute first match in variable": {
    "prefix": "varReplace",
    "body": "\"\\${${1:VAR}/${2:pattern}/${0:str}}\""
  },
  "Substitute all matches in variable": {
    "prefix": "varReplaceAll",
    "body": "\"\\${${1:VAR}//${2:pattern}/${0:str}}\""
  },
  "Keep everything after last slash": {
    "prefix": "varBasename",
    "body": "\\${${1:VAR}##*/}$0"
  },
  "Keep everything before last dot": {
    "prefix": "varNoExtension",
    "body": "\\${${1:VAR}%.*}$0"
  },
  "Keep everything after last dot": {
    "prefix": "varExtension",
    "body": "\\${${1:VAR}##*.}$0"
  },
  "Redirect to null": {
    "prefix": "redirnull",
    "body": "> /dev/null 2>&1"
  },
  "Redirect to stderr": {
    "prefix": "redirerr",
    "body": ">&2"
  },
  "Redirect stderr to null": {
    "prefix": "redirerrornull",
    "body": "2> /dev/null"
  },
  "Redirect stderr to stdin": {
    "prefix": "redirerrorstdin",
    "body": "2>&1"
  },
  "Script directory": {
    "prefix": "scriptDirectory",
    "body": "SCRIPT_DIR=\"\\$(cd -- \"\\$(dirname -- \"\\${BASH_SOURCE[0]:-\\$0}\")\" &> /dev/null && pwd 2> /dev/null)\""
  },
  "Log": {
    "prefix": "log",
    "body": "printf \"\\033[0;36m%s\\033[0m\\n\" \"$0\""
  },
  "iSO date": {
    "prefix": "dateISO",
    "body": "date -u +'%Y-%m-%dT%H:%M:%SZ'"
  },
  "Prompt yes or no (zsh compatible)": {
    "prefix": "promptYesNo",
    "body": [
      "printf '${1:Continue} (Y/n)? '",
      "read -r REPLY",
      "if [ -z \"\\$REPLY\" ] || [ \"\\$REPLY\" != \"\\${REPLY#[Yy]}\" ]; then",
      "  ${0:echo Yes}",
      "fi"
    ]
  },
  "Read one character": {
    "prefix": "promptOneKey",
    "body": [
      "read -p '${1:To abort press n.}' -n 1; echo",
      "if [ \"\\$REPLY\" != \"\\${REPLY#[Nn]}\" ]; then",
      "  ${0:exit 0}",
      "fi"
    ]
  }
}
