{
  "UseRef": {
    "prefix": "useRef",
    "body": "const ref = useRef<${0:HTMLInputElement}>(null);"
  },
  "UseState": {
    "prefix": ["useState", "usestate"],
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState($0);"
  },
  "UseEffect": {
    "prefix": ["useEffect", "useeffect"],
    "body": ["useEffect(() => {", "\t$0", "}, []);"]
  },
  "UseMemo": {
    "prefix": "useMemo",
    "body": [
      "const ${1:memorized} = useMemo(() => {",
      "\treturn $2",
      "}, [$0]);"
    ]
  },
  "UseContext": {
    "prefix": "useContext",
    "body": "const ${1:service}Context = useContext(${1/(.*)/${1:/capitalize}/}Context)${2:!};$0"
  },
  "Props": {
    "prefix": "props",
    "body": "$0={$0}"
  },
  "Props get set type": {
    "prefix": "props-getter-setter",
    "body": [
      "${1:state}: ${0:string};",
      "set${1/(.*)/${1:/capitalize}/}: React.Dispatch<React.SetStateAction<$0>>;"
    ]
  },
  ".filter() array elements not undefined": {
    "prefix": "defined",
    "body": "filter(<T,>(${1:value}: T | null | undefined): $1 is T => $1 !== null && $1 !== undefined)"
  },
  ".filter() array of objects with property not undefined": {
    "prefix": "definedProperty",
    "body": [
      "filter((${1:value}): $1 is RequiredKey<typeof $1, '${2:property}'> => $1.$2 !== null && $1.$2 !== undefined)",
      "",
      "type RequiredKey<T, K extends keyof T> = T & Required<Pick<T, K>>;"
    ]
  },
  ".filter() fulfilled PromiseAllSettled results": {
    "prefix": "fulfilled",
    "body": [
      "filter(",
      "\t<T,>(",
      "\t\tresult: PromiseSettledResult<T>,",
      "\t): result is PromiseFulfilledResult<T> => result.status === 'fulfilled',",
      ")",
      ".map((result) => result.value)"
    ]
  },
  "Expand type": {
    "prefix": "expand-type",
    "body": [
      "type Expand<T> = T extends (...args: infer A) => infer R",
      "\t? (...args: Expand<A>) => Expand<R>",
      "\t: T extends infer O",
      "\t\t? { [K in keyof O]: O[K] }",
      "\t\t: never;",
      "",
      "type ExpandRecursive<T> = T extends (...args: infer A) => infer R",
      "\t? (...args: ExpandRecursive<A>) => ExpandRecursive<R>",
      "\t: T extends object",
      "\t\t? T extends infer O",
      "\t\t\t? { [K in keyof O]: ExpandRecursive<O[K]> }",
      "\t\t\t: never",
      "\t\t: T;",
      "",
      "type expanded = Expand<${1:Type}>;",
      "type recursivelyExpanded = ExpandRecursive<${1:Type}>;"
    ]
  },
  "Jest describe": {
    "prefix": "desc",
    "body": [
      "describe('${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}', () => {",
      "\tit('${2:should return true}', async () => {",
      "\t\texpect(true).toEqual(true);",
      "\t});",
      "});"
    ]
  },
  "Jest act": {
    "prefix": "act",
    "body": ["await act(async () => {", "\t$0", "});"]
  },
  "Jest clear all mocks": {
    "prefix": "afterEach-clearAll",
    "body": ["afterEach(() => {", "\tjest.clearAllMocks();", "});"]
  },
  "Jest expect partial object": {
    "prefix": "expect-object-containing",
    "body": "expect(${1:actual}).toEqual(expect.objectContaining(${2:expected}));"
  },
  "Jest as mocked": {
    "prefix": "as-mocked",
    "body": "const ${1:var}Mock = $1 as jest.Mocked<typeof $1>;"
  },
  "Jest doMock": {
    "prefix": "template-mock",
    "body": [
      "const fn = jest.fn().mockImplementation((args) => {",
      "\treturn Promise.resolve();",
      "});",
      "",
      "jest.doMock('${1:./module}', () => {",
      "\treturn {",
      "\t\t...jest.requireActual('${1:./module}'),",
      "\t\tutils: jest.fn(() => ({",
      "\t\t\tfn,",
      "\t\t})),",
      "\t};",
      "\tComponent: (props: ComponentProps<typeof Component>) => <div />,",
      "});",
      ""
    ]
  },
  "Custom error": {
    "prefix": "template-error",
    "body": [
      "class ${1:Custom}Error extends Error {",
      "\tconstructor(message?: string) {",
      "\t\tsuper(message);",
      "\t\tthis.name = '${1:Custom}Error';",
      "\t}",
      "}"
    ]
  },
  "Promise pool": {
    "prefix": "template-promise-pool",
    "body": [
      "type PromiseFunc<T = unknown> = () => Promise<T>;",
      "",
      "const createPromisePool = (limit: number) => {",
      "\tconst queue: PromiseFunc[] = [];",
      "\tconst jobs: Set<PromiseFunc> = new Set();",
      "",
      "\tconst next = () => {",
      "\t\tif (jobs.size >= limit) return;",
      "\t\tqueue.splice(0, limit - jobs.size).forEach((job) => {",
      "\t\t\tjobs.add(job);",
      "\t\t\tvoid job().finally(() => {",
      "\t\t\t\tjobs.delete(job);",
      "\t\t\t\tnext();",
      "\t\t\t});",
      "\t\t});",
      "\t};",
      "",
      "\treturn {",
      "\t\trun: <T>(func: () => Promise<T>): Promise<T> =>",
      "\t\t\tnew Promise((resolve, reject) => {",
      "\t\t\t\tqueue.push(() => func().then(resolve).catch(reject));",
      "\t\t\t\tnext();",
      "\t\t\t}),",
      "\t};",
      "};"
    ]
  },
  "UseFetchResources": {
    "prefix": "template-use-fetch-resources",
    "body": [
      "import { Reducer, useEffect, useReducer, useRef, useState } from \"react\";",
      "",
      "interface State<T> {",
      "\tdata?: T;",
      "\tloading: boolean;",
      "\terror?: Error;",
      "}",
      "",
      "type Action<T> =",
      "\t| { type: \"request\" }",
      "\t| { type: \"success\"; payload: State<T>[\"data\"] }",
      "\t| { type: \"failure\"; error: NonNullable<State<T>[\"error\"]> };",
      "",
      "type GenericReducer<T = any> = Reducer<State<T>, Action<T>>;",
      "const genericReducer: GenericReducer = (state, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase \"request\":",
      "\t\t\treturn { loading: true };",
      "\t\tcase \"success\":",
      "\t\t\treturn { loading: false, data: action.payload };",
      "\t\tcase \"failure\":",
      "\t\t\treturn { loading: false, error: action.error };",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};",
      "",
      "export const useFetchURI = (uri: string) => {",
      "\tconst reducer: GenericReducer<${0:unknown}> = genericReducer;",
      "\tconst [state, dispatch] = useReducer(reducer, { loading: false });",
      "\tconst [refresh, setRefresh] = useState({});",
      "\tconst abortControllerRef = useRef<AbortController>();",
      "",
      "\tuseEffect(() => {",
      "\t\tabortControllerRef.current = new AbortController();",
      "\t\tdispatch({ type: \"request\" });",
      "\t\tfetch(uri, { signal: abortControllerRef.current.signal })",
      "\t\t\t.then((response) => {",
      "\t\t\t\tif (response.ok) return response.json();",
      "\t\t\t\treturn response.text().then((text) => Promise.reject(text));",
      "\t\t\t})",
      "\t\t\t.then((payload) => dispatch({ type: \"success\", payload }))",
      "\t\t\t.catch((error) => dispatch({ type: \"failure\", error }));",
      "",
      "\t\treturn () => abortControllerRef.current!.abort();",
      "\t}, [uri, refresh]);",
      "",
      "\treturn {",
      "\t\t...state,",
      "\t\trefresh: () => setRefresh({}),",
      "\t\tabort: () => abortControllerRef.current?.abort(),",
      "\t};",
      "};"
    ]
  },
  "Typed object functions": {
    "prefix": "template-typed-object-fn",
    "body": [
      "/**",
      " * Unsafe functions that assume object does not contain additional keys and",
      " * cast result based on object type.",
      " * Taken from https://news.ycombinator.com/item?id=36457557#36459276.",
      " */",
      "export const TypedObject = {",
      "\tkeys: Object.keys as <T>(obj: T) => Array<keyof T>,",
      "\tentries: Object.entries as <T>(o: T) => Array<",
      "\t\t{",
      "\t\t\t[K in Exclude<keyof T, undefined>]: [K, T[K]];",
      "\t\t}[Exclude<keyof T, undefined>]",
      "\t>,",
      "};"
    ]
  },
  "Jest react hook": {
    "prefix": "template-jest-react-hook",
    "body": [
      "import { renderHook } from '@testing-library/react-hooks';",
      "import * as serviceExports from './service';",
      "",
      "describe('${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}', () => {",
      "\tconst spy = jest.spyOn(serviceExports, 'request');",
      "",
      "\tbeforeEach(() => {",
      "\t\tspy.mockResolvedValueOnce({ data: 'test' });",
      "\t});",
      "",
      "\tafterEach(() => {",
      "\t\tjest.clearAllMocks();",
      "\t});",
      "",
      "\tit('should show loading', async () => {",
      "\t\tconst { result, waitForNextUpdate } = renderHook(() => ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}());",
      "\t\texpect(result.current.loading).toBe(true);",
      "\t\tawait waitForNextUpdate();",
      "\t\texpect(result.current.loading).toBe(false);$0",
      "\t});",
      "});"
    ]
  }
}
