{
  "Log": {
    "prefix": "cl",
    "body": ["console.log('❗$0:', $0);"]
  },
  "Log stringify": {
    "prefix": "clj",
    "body": ["console.log('❗$0:\\n' + JSON.stringify($0, null, 2));"]
  },
  "Print stack trace": {
    "prefix": "ct",
    "body": [
      "console.groupCollapsed('stack trace', $1);",
      "console.trace();",
      "console.groupEnd();"
    ]
  },
  "Logger": {
    "prefix": "logger",
    "body": [
      "const log = (...args) => console.log(`[\\${new Date().toISOString()}]`, ...args);"
    ]
  },
  "Benchmark": {
    "prefix": "benchmark",
    "body": [
      "console.time('${1:Performance test}');",
      "$0",
      "console.timeEnd('${1:Performance test}');"
    ]
  },
  "JSDoc link class": {
    "prefix": "link",
    "body": ["{@link ${1:Class}}"]
  },
  "UUID": {
    "prefix": "uuid",
    "body": ["crypto.randomUUID()"]
  },
  "Range": {
    "prefix": "range",
    "body": ["Array(${1:10}).fill().map(Number.call, Number)"]
  },
  "Random string": {
    "prefix": "random-string",
    "body": [
      "const randString = () => Math.random().toString(36).substring(2);"
    ]
  },
  "Random integer": {
    "prefix": "random-int",
    "body": [
      "const randint = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);"
    ]
  },
  "Empty arrow function": {
    "prefix": "arrow",
    "body": ["() => {}"]
  },
  "Timeout": {
    "prefix": "timeout",
    "body": [
      "const timeout = (ms) => {",
      "\treturn new Promise((resolve) => setTimeout(resolve, ms));",
      "}"
    ]
  },
  "Timeout outside async": {
    "prefix": "sleep",
    "body": ["await new Promise((resolve) => setTimeout(resolve, ${1:1000}));"]
  },
  "Immediately-invoked async function": {
    "prefix": "async",
    "body": ["void (async () => {", "\t$0", "})();"]
  },
  "Promise then": {
    "prefix": "then",
    "body": [
      ".then((resp) => {",
      "\t$1",
      "})",
      ".catch((error) => {",
      "\t$0",
      "});"
    ]
  },
  "Promise then log": {
    "prefix": "then-log",
    "body": [".then((resp) => {", "\tconsole.log(resp);", "})"]
  },
  "POST with fetch": {
    "prefix": "fetch-post",
    "body": [
      "const response = fetch(${1:uri}, {",
      "\tmethod: \"POST\",",
      "\theaders: {",
      "\t\tAccept: 'application/json',",
      "\t\t'Content-Type': 'application/json',",
      "\t},",
      "\tbody: JSON.stringify(${2:payload}),",
      "}).then((response) => {",
      "\tif (response.ok) return response.json();",
      "\treturn response.text().then((text) => Promise.reject(text));",
      "});"
    ]
  },
  "Read from file": {
    "prefix": "read-file",
    "body": [
      "const fs = require('node:fs/promises');",
      "const lines = (await fs.readFile(`\\${__dirname}/${1:fileName}`, 'utf8'))",
      "\t.split(/\\r?\\n/)",
      "\t.filter(line => line.trim() !== '');"
    ]
  },
  "Write to file": {
    "prefix": "write-file",
    "body": [
      "const fs = require('node:fs/promises');",
      "await fs.mkdir(`\\${__dirname}/`, { recursive: true });",
      "await fs.writeFile(`\\${__dirname}/${1:fileName}`, ${0:lines.join('\\n')});",
      "// await fs.appendFile(`\\${__dirname}/${1:fileName}`, ${0:lines.join('\\n')});"
    ]
  },
  "Dirname in esmodule": {
    "prefix": "__dirname-in-module",
    "body": [
      "import path from 'path';",
      "import { fileURLToPath } from 'url';",
      "",
      "const __filename = fileURLToPath(import.meta.url);",
      "const __dirname = path.dirname(__filename);"
    ]
  },
  "Closure function": {
    "prefix": "closure",
    "body": [
      "const ${1:func} = (() => {",
      "\t${2:let local = 0;}",
      "\treturn (${3:funcParam}) => {",
      "\t\treturn ${4:local++};",
      "\t};",
      "})();"
    ]
  },
  "Promise pool": {
    "prefix": "template-promise-pool",
    "body": [
      "const createPromisePool = (limit) => {",
      "\tconst queue = [];",
      "\tconst jobs = new Set();",
      "",
      "\tconst next = () => {",
      "\t\tif (jobs.size >= limit) return;",
      "\t\tqueue.splice(0, limit - jobs.size).forEach((job) => {",
      "\t\t\tjobs.add(job);",
      "\t\t\tjob().finally(() => {",
      "\t\t\t\tjobs.delete(job);",
      "\t\t\t\tnext();",
      "\t\t\t});",
      "\t\t});",
      "\t};",
      "",
      "\treturn {",
      "\t\trun: (func) =>",
      "\t\t\tnew Promise((resolve, reject) => {",
      "\t\t\t\tqueue.push(() => func().then(resolve).catch(reject));",
      "\t\t\t\tnext();",
      "\t\t\t}),",
      "\t};",
      "};"
    ]
  },
  "Shell template": {
    "prefix": "template-shell",
    "body": [
      "const { exec } = require(\"child_process\");",
      "const shell = (command, timeout = 90000, parseJSON = false) => {",
      "\treturn new Promise((resolve, reject) =>",
      "\t\texec(command, { timeout }, (error, stdout, stderr) => {",
      "\t\t\tif (stderr) console.error(`stderr: \\${stderr.trim()}`);",
      "\t\t\tif (error) {",
      "\t\t\t\treject(error.message);",
      "\t\t\t\treturn;",
      "\t\t\t}",
      "\t\t\tif (!parseJSON) resolve(stdout);",
      "\t\t\ttry {",
      "\t\t\t\tresolve(JSON.parse(stdout));",
      "\t\t\t} catch (parseError) {",
      "\t\t\t\treject(parseError);",
      "\t\t\t}",
      "\t\t}),",
      "\t);",
      "};"
    ]
  },
  "Cypress delay": {
    "prefix": "cydelay",
    "body": ["cy.wait(delay);", "$0"]
  },
  "Cypress test id": {
    "prefix": "cytestid",
    "body": ["cy.get('[data-test-subj=\"$1\"]')$0"]
  },
  "Cypress click": {
    "prefix": "cyclick",
    "body": ["cy.contains('$0').click({ force: true });"]
  },
  "Cypress text exists": {
    "prefix": "cyexists",
    "body": ["cy.contains('$0').should('exist');"]
  }
}
