[init]
	defaultBranch = main

[user]
	email = joshuali925@gmail.com
	name = Joshua Li

; [credential]
; 	helper = store

[alias]
	configs = config --list --show-scope --show-origin
	authors = shortlog --summary --numbered --email
	untracked = ls-files --others --exclude-standard
	ignored = ls-files --others --exclude-standard --ignored
	exclude = !$EDITOR .git/info/exclude
	update-skip = update-index --skip-worktree
	unupdate-skip = update-index --no-skip-worktree
	update-skipped = "!git ls-files -v | grep '^S'"
	autoremove = gc --prune=now --aggressive
	difft = -c diff.external=difft diff
	diffw = -c core.pager='diff-so-fancy | less --tabs=4 -RiMXF' diff --word-diff=color --ignore-all-space
	diff-side-by-side = -c core.pager='delta --line-numbers --navigate --side-by-side' diff
	diff-so-fancy = -c core.pager='diff-so-fancy | less --tabs=4 -RiMXF' diff
	preview-merge-diff = "!f() { git diff HEAD...\"$@\"; }; f"  # diff between target and the common ancestor of HEAD and target
	preview-merge-log = "!git log --graph --pretty=simple HEAD.."  # commits in target but not in HEAD (will be merged with git merge target)
	pulled = "!git log --pretty=simple --stat ORIG_HEAD...HEAD"  # what was pulled
	topush = "!git log --pretty=simple --stat --stat @{upstream}..HEAD"  # what will be pushed
	missing = "!unset GIT_DIR GIT_WORK_TREE; cd -- \"${GIT_PREFIX:-.}\"; f() { git log --graph --pretty=simple --cherry-pick --right-only HEAD...\"$@\"; }; f"  # commits in target but not in HEAD and not cherry-picked to HEAD, similar to git cherry -v HEAD <target>
	# TODO try https://github.com/mlange-42/git-graph
	forest = "!unset GIT_DIR GIT_WORK_TREE; cd -- \"${GIT_PREFIX:-.}\"; f() { git foresta --style=10 \"$@\" | less -RiMXF -p $(git show -s --format=%h); }; f"
	ignore = "!f() { echo \"$@\" >> .gitignore; }; f"
	ignoreio = "!f() { curl -fsSL https://www.gitignore.io/api/\"$@\"; }; f"
	abort = "!git merge --abort 2>/dev/null || git cherry-pick --abort 2>/dev/null || git rebase --abort 2>/dev/null || git revert --abort 2>/dev/null || git am --abort 2>/dev/null"
	continue = "!git merge --continue 2>/dev/null || git cherry-pick --continue 2>/dev/null || git rebase --continue 2>/dev/null || git revert --continue 2>/dev/null || git am --continue 2>/dev/null"
	rerere-forget = "!rm -rf .git/rr-cache"
	wip = "!git add -A; git ls-files --deleted -z | xargs -r0 git rm; git commit --signoff --no-verify -m '--wip--'"
	unwip = "!git log -n 1 | grep -q -c -- '--wip--' && git reset HEAD~1"
	clear = "!git add --all && git stash push --include-untracked --message 'auto backup'"
	nuke = "!git clear && git reset --hard && git clean -fdx"
	reset-to-remote = "!git clear && git reset --hard @{upstream}"
	reset-to-merge-base = "!f() { local ref=${1:-HEAD} remote=${2:-origin}; echo \"Resetting base against $remote/$ref\" >&2; git fetch \"$remote\" && git reset \"$(git merge-base HEAD \"$remote/$ref\")\"; }; f"
	unshallow = "!if [[ \"$(git config --local --get remote.origin.partialclonefilter)\" = blob:none ]]; then git fetch --no-filter --refetch; else git remote set-branches origin '*' && git fetch -v && printf '\\nRun \"git fetch --unshallow\" to fetch all history\\n'; fi"
	where = "!f() { printf \"\\e[0;36mClosest tag before ${*:-HEAD}:\\e[0m \"; git describe --tags --abbrev=0 \"${@:-HEAD}\"; printf \"\\e[0;36mBranches containing ${*:-HEAD}:\\e[0m\\n\"; git branch --color -a --contains \"${@:-HEAD}\"; }; f"
	size = "!git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | cut -c 1-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest"  # use https://rtyley.github.io/bfg-repo-cleaner to remove
	tree = "!git ls-files | tree --fromfile"
	wt = "!f() { if [[ $# -gt 0 ]]; then if [[ $1 = add ]]; then git worktree add -f \"${@:2}\"; else git worktree \"$@\"; fi; return $?; fi; local worktree; worktree=$(git worktree list | fzf | awk '{print $1}') && [[ -d $worktree ]] && cd \"$worktree\"; }; f"
	pull-all = "!find -- \"${GIT_PREFIX:-.}\" -name .git -print -execdir git pull \\;"
	status-all = "!find -- \"${GIT_PREFIX:-.}\" -name .git -execdir bash -c 'echo -e \"\\033[1;32m\"repo: \"\\033[1;34m\"$([[ $(pwd) = '$PWD' ]] && echo $(basename $PWD) \"\\033[1;30m\"\\(current directory\\) || realpath --relative-to=\"'$PWD'\" .) \"\\033[1;30m\"- \"\\033[1;33m\"$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD)\"\\033[1;30m\"$(git log --pretty=format:\" (%cr)\" --max-count 1)\"\\033[0m\"; git status -s' \\;"
	open = "!git remote get-url origin | sed -e 's,git@\\([^:]\\+\\):,https://\\1/,' -e 's/\\.git$//' | if command -v open > /dev/null 2>&1; then xargs open; else y; fi"
	patch = "!f() { if [[ $# -ne 0 ]]; then curl -fsSL \"$(git remote get-url \"${2:-origin}\" | sed -e 's,git@\\([^:]\\+\\):,https://\\1/,' -e 's/\\.git$//')/pull/$1.diff\" | git apply -3; return $?; fi; if builtin command -v pbpaste > /dev/null 2>&1; then pbpaste | sed -e '$a\\' | git apply -3; else vim -u ~/.vim/config/mini.vim -i NONE +startinsert patch.diff && git apply -3 patch.diff && rm patch.diff; fi; }; f"
	toggle-url = "!f() { local pattern='s,^\\(https://\\|git@\\)\\([^:/]\\+\\)[:/],' remote=\"${1:-origin}\" url=\"$(git remote get-url \"${1:-origin}\")\"; grep -q '^https://' <<< \"$url\" && pattern=\"${pattern}git@\\\\2:,\" || pattern=\"${pattern}https://\\\\2/,\"; git remote set-url \"$remote\" \"$(sed \"$pattern\" <<< \"$url\")\"; git remote -v; }; f"
	ls = "!unset GIT_DIR GIT_WORK_TREE; cd -- \"${GIT_PREFIX:-.}\"; { find . -maxdepth 1 ! -path . -type d | cut -d/ -f2- | xargs -I{} -P$(nproc) sh -c 'git log --color --format=\"$(ls -d -F --color \"{}\")§%C(bold black)▕ %Creset%C(yellow)%h %Cgreen%cr%Creset§%C(bold black)▕ %C(bold blue)%an %Creset%s%Creset\" --max-count 1 HEAD -- \"{}\"' | sort; find . -maxdepth 1 ! -type d | cut -d/ -f2- | xargs -I{} -P$(nproc) sh -c 'git log --color --format=\"$(ls -d -F --color \"{}\")§%C(bold black)▕ %Creset%C(yellow)%h %Cgreen%cr%Creset§%C(bold black)▕ %C(bold blue)%an %Creset%s%Creset\" --max-count 1 HEAD -- \"{}\"' | sed 'h;s/\\x1b[[0-9;]*m//g;G;s/\\n/\\t/' | sort | cut -f2-; } | awk -F'§' -vCOLUMNS=$(tput cols || echo 80) '{ nf[NR]=NF; for (i = 1; i <= NF; i++) { cell[NR,i] = $i; gsub(/\\033\\[([[:digit:]]+(;[[:digit:]]+)*)?[mK]/, \"\", $i); len[NR,i] = l = length($i); if (l > max[i]) max[i] = l; } } END { for (row = 1; row <= NR; row++) { width = 0; for (col = 1; col < nf[row]; col++) { printf \"%s%*s%s\", cell[row,col], max[col]-len[row,col], \"\", OFS; width+=max[col]+1; } print substr(cell[row,nf[row]],1,COLUMNS-width+17); } }'"
	histogram = "!git log --date=format:'%Y-%m' --pretty=format:'%cd' | sort | uniq -c | awk 'BEGIN{\"git log --reverse --date=format:%Y-%m --pretty=%cd | head -1\" | getline start; cmd=\"date -d \\\"\" start \"-01\\\" +%s\"; cmd | getline ts; close(cmd)} {counts[$2]=$1; if($2>max_date)max_date=$2} END{while(1){date=strftime(\"%Y-%m\",ts); count=counts[date]+0; printf \"%s %4d %s\\n\",date,count,repeat(\"█\",int(count^0.7)); if(date==max_date)break; ts+=2678400}} function repeat(s,n){return n?s repeat(s,n-1):\"\"}' | less -RiMXF"
	rg = "!f() { unset GIT_DIR GIT_WORK_TREE; cd -- \"${GIT_PREFIX:-.}\"; if [[ $# -eq 0 ]]; then echo \"Usage: git rg [--reflog] [--regex] <text> [<git-log-args>]\" >&2; return 1; fi; while [[ $# -ne 0 ]]; do case $1 in --reflog) local cmd=reflog; shift ;; --regex) local search=-G; shift ;; --) shift; break ;; *) break ;; esac done; local pattern=$'\\022'$1; git \"${cmd:-log}\" --color --pretty=simple --all --regexp-ignore-case \"${search:--S}\" \"$@\" | fzf --ansi --bind=',:preview-down,.:preview-up' --bind='tab:down,btab:up' --bind=\"enter:execute(grep -o \\\"[a-f0-9]\\\\{7,\\\\}\\\" <<< {} | head -n 1 | xargs -I{} git show --patch-with-stat --color {} | DELTA_PAGER=\\\"$BAT_PAGER --pattern=\\\\\\\"$pattern\\\\\\\"\\\" delta --line-numbers)\" --preview=\"grep -o \\\"[a-f0-9]\\\\{7,\\\\}\\\" <<< {} | head -n 1 | xargs git show --patch-with-stat --color | delta --paging=never\"; }; f"
	fd = "!f() { local root=$PWD; unset GIT_DIR GIT_WORK_TREE; cd -- \"${GIT_PREFIX:-.}\"; local filepath=$(git log --pretty=format: --name-only --all \"$@\" | awk NF | sort -u | fzf --ansi --multi --header=\"Find file in all commits, git log takes glob: git fd '*filename*'\" --preview=\"git log --color --pretty=simple --all --full-history -- '$root'/{}\"); if [[ -n $filepath ]]; then local sha=$(git log --color --pretty=simple --all --full-history -- \"${root}/${filepath}\" | fzf --ansi --preview=\"grep -o \\\"[a-f0-9]\\\\{7,\\\\}\\\" <<< {} | head -n 1 | xargs -I{} git show {} -- ${root}/${filepath} | delta --paging=never\" --bind=',:preview-down,.:preview-up' | grep -o \"[a-f0-9]\\{7,\\}\" | head -n 1); if [[ -n $sha ]]; then printf \"\\033[0;35mgit show $sha:$filepath\\033[0m\\n\" >&2; git show \"$sha:$filepath\" | $EDITOR - -c \"file $sha:$filepath\" -c 'filetype detect'; fi; fi; }; f"
	pr = "!f() { if [[ $# -lt 1 ]]; then echo \"Usage: git pr {<PR-number>|<PR-URL>} [<remote>]\" >&2; return 1; fi; local pr=${1##*/} remote=${2:-origin}; git clear; git fetch -fu \"$remote\" \"refs/pull/$pr/head:pr/$pr\" && git checkout \"pr/$pr\" && git reset --hard FETCH_HEAD && git config --local --replace \"branch.pr/$pr.remote\" \"$remote\" && git config --local --replace \"branch.pr/$pr.merge\" \"refs/pull/$pr/head\"; }; f"

[pretty]
	simple = format:%C(yellow)%h %Cgreen⦗%cr⦘%C(auto)%d%Creset %s %C(bold blue)❪%an❫%Creset
	simple-iso = format:%C(yellow)%h %Cgreen⦗%ci⦘%C(auto)%d%Creset %s %C(bold blue)❪%an❫%Creset
	simple-ref = format:%C(yellow)%h%Creset %Cgreen%gD:%Creset %gs%Creset%C(auto)%d%Creset

[url "https://github.com/"]
	insteadOf = gh:

[url "git@github.com:joshuali925/"]
	insteadOf = jos:

[url "https://github.com/joshuali925/"]
	insteadOf = josh:

[url "https://github.com/opensearch-project/"]
	insteadOf = os:

[url "https://github.com/opensearch-project/dashboards-"]
	insteadOf = osd:

[core]
	longpaths = true
	excludesfile = ~/.gitignore
	; pager = less -RiMXF
	; pager = diff-so-fancy | less -RiMXF
	pager = delta --line-numbers --navigate

[interactive]
	; diffFilter = diff-so-fancy --patch
	diffFilter = delta --line-numbers

[diff]
	renames = copies
	renameLimit = 10000

[fetch]
	prune = true
	writeCommitGraph = true

[pull]
	rebase = true

[commit]
	verbose = true

[rebase]
	autoSquash = true
	autoStash = true

[merge]
	conflictstyle = diff3
	tool = vimdiff

[diff]
	algorithm = histogram
	colorMoved = default
	colorMovedWS = allow-indentation-change

[blame]
	coloring = highlightRecent

[rerere]
	enabled = true
	autoupdate = true

[color]
	ui = true

[color "diff"]
	meta = 11
	frag = magenta bold
	func = 146 bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
	; for colorMoved. doesn't work well in light theme since delta 'map-styles' doesn't work in lazygit
	oldMoved = bold magenta "#330f29"
	oldMovedAlternative = bold red "#330f29"
	newMoved = bold blue "#0d3531"
	newMovedAlternative = bold cyan "#0d3531"

[color "blame"]
	highlightRecent = 238, 36 month ago, 240, 24 month ago, 242, 12 month ago, 244, 6 month ago, 246, 2 month ago, 248, 1 month ago, 250, 3 weeks ago, 231, 2 weeks ago, 230, 1 week ago, 229, 3 days ago, 228, 1 day ago, 227

[diff-so-fancy]
	stripLeadingSymbols = false

[delta]
	hunk-header-style = line-number syntax bold
	hunk-header-line-number-style = white
	hunk-header-decoration-style = "#4b5263" box
	file-style = "#e5b34a" italic
	file-decoration-style = "#e5b34a" ul
	line-numbers-zero-style = "#4b5263"
	line-numbers-left-format = "{nm:^4} "
	line-numbers-right-format = "{np:^4} "
