set hidden
set incfilter
set info size
set dircounts
set icons
set previewer ~/.vim/config/lf-preview.sh

map zh
map zr
map zn
map zs
map zt
map za
map z z

map sh set hidden!
map sr set reverse!
map sis set info size
map sit set info time
map sia set info size:time
map se :set sortby ext; set info size
map sn :set sortby natural; set info size

map m
map mm mark-save
map mM mark-remove
map me edit-selected
map mp paste-symlink --relative
map mP paste-symlink
map mr vidir-bulk-rename
map mR vimv-bulk-rename
map ms selected-dir-size
map mS cwd-size
map mt tail
map mc edit-config
map my copy-path
map md5 md5
map mvi vi
map m! sudolf

map v :toggle; down
map V invert
map x delete
map D delete
map r reload
map R rename
map / filter
map ~ cd
map , find-next
map ; find-prev
map H push <c-u>
map L push <c-d>
map K push hkl
map J push hjl
map `` push ''
map c :clear; unselect
map gs !clear && git status
map gr cd-git-root
map gvi :cd ~/.vim
map gvd :cd ~/.local/share/nvim
map gvp :cd ~/.local/share/nvim/site/pack/packer/opt
map gl follow-symlink
map t locate-file
map T locate-file --no-ignore
map <c-p> locate-git-file
map <c-o> $lazygit
map <tab> locate-file-cwd
map I $less -RiM "$f"
map i $FULL_PREVIEW=1 ~/.vim/config/lf-preview.sh "$f"

cmap <up> cmd-history-prev
cmap <down> cmd-history-next

cmd mkdir %mkdir -p "$@"
cmd touch %touch "$@"
cmd chmod %{{ chmod "$@" "$f"; lf -remote "send $id reload" }}
cmd chmod? %stat --printf "%a %n \n" "$f"
cmd vi $command vim -u ~/.vim/config/mini.vim -i NONE "$f"
cmd vim $$EDITOR "$@"
cmd rg !clear && rg "$@"
cmd code %code .
cmd tail $less -RiM +F "$f"
cmd sudoedit $sudo vim -u ~/.vim/config/mini.vim "$f"
cmd sudolf !EDITOR="vim -u $HOME/.vim/config/mini.vim" XDG_CONFIG_HOME="$HOME/.config" sudo -E "$(/usr/bin/which lf)" -command 'set previewer'
cmd file !file "$f"
cmd pwd %echo "$f"
cmd size !du -h --max-depth=1 | sort -hr
cmd gdu $"$HOME/.vim/bin/gdu"
cmd md5 !echo "$fx" | xargs -d '\n' md5sum
cmd selected-dir-size %du -h --max-depth=0 "$f"
cmd cwd-size %du -h --max-depth=0 .
cmd edit-config ${{ $EDITOR ~/.vim/config/lfrc }}
cmd edit-selected ${{ echo "$fx" | xargs -d '\n' $EDITOR }}
cmd vidir-bulk-rename ${{ echo "$fx" | vidir - }}
cmd vimv-bulk-rename ${{ echo "$fx" | xargs -d '\n' vimv; echo }}
cmd cd-git-root %{{ lf -remote "send $id cd \"$(git rev-parse --show-toplevel || echo '.')\"" }}
cmd copy-path %{{ realpath "$f" | y; echo "copied: $(realpath "$f")" }}

cmd follow-symlink ${{
  res="$(readlink -f "$f" || echo '.')"
  if [ -f "$res" ]; then
    lf -remote "send $id select \"$res\""
  elif [ -d "$res" ]; then
    lf -remote "send $id cd \"$res\""
  fi
}}

cmd locate-file-cwd ${{
  res="$(eval "$FZF_ALT_C_COMMAND" | FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" fzf)"
  if [ -f "$res" ]; then
    lf -remote "send $id select \"$res\""
  elif [ -d "$res" ]; then
    lf -remote "send $id cd \"$res\""
  fi
}}

cmd locate-file ${{
  res="$(eval "$FZF_CTRL_T_COMMAND $@" | FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" fzf --bind='tab:down,btab:up')"
  if [ -f "$res" ]; then
    lf -remote "send $id select \"$res\""
  elif [ -d "$res" ]; then
    lf -remote "send $id cd \"$res\""
  fi
}}

cmd locate-git-file ${{
  git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
  if [ "$git_repo" ]; then
    res="$(git ls-files $(git rev-parse --show-toplevel) | fzf --bind='tab:down,btab:up')"
  else
    res="$(eval "$FZF_CTRL_T_COMMAND $@" | FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" fzf --bind='tab:down,btab:up')"
  fi
  if [ -f "$res" ]; then
    lf -remote "send $id select \"$res\""
  elif [ -d "$res" ]; then
    lf -remote "send $id cd \"$res\""
  fi
}}

cmd z ${{
  res="$(awk -F '|' '{print $1}' ~/.z | fzf --bind='tab:down,btab:up')"
  lf -remote "send $id cd \"$res\""
}}

cmd paste-symlink %{{
  load=$(cat ~/.local/share/lf/files)
  mode=$(echo "$load" | sed -n '1p')
  list=$(echo "$load" | sed '1d')
  args="$@"
  if [ $mode = 'copy' ] || [ $mode = 'move' ]; then
    ln="ln --symbolic $args" && [ $mode = 'move' ] && ln='ln'
    please='' && [ ! -w . ] && please='sudo'
    for f in $list; do
      $please $ln "$f" "$(pwd)/$(basename $f)"
    done
    lf -remote 'send clear'
    lf -remote 'send load'
  fi
}}

cmd zip ${{
  selected=()
  while IFS= read -r line; do
    selected+=("$(realpath --relative-to='.' "$line")")
  done <<< "$fx"
  zip -r "${selected[0]}.zip" "${selected[@]}"
}}

cmd x ${{
  set -f
  filename="$(basename "$f")"
  if [ -f "$filename" ] ; then
    case "$filename" in
      *.tar)                       tar xvf "$filename"     ;;
      *.tar.gz | *.tgz)            tar xvzf "$filename"    ;;
      *.tar.xz | *.xz)             tar xvJf "$filename"    ;;
      *.tar.bz2 | *.tbz | *.tbz2)  tar xvjf "$filename"    ;;
      *.bz2)                       bunzip2 "$filename"     ;;
      *.gz)                        gunzip "$filename"      ;;
      *.zip)                       unzip "$filename"       ;;
      *.rar)                       unrar x "$filename"     ;;
      *.Z)                         uncompress "$filename"  ;;
      *.7z)                        7z x "$filename"        ;;
      *)                           echo "Unable to extract '$filename'" ;;
    esac
  else
    tar czvf "$filename.tar.gz" "$filename"
  fi
}}

cmd X ${{
  set -f
  selected="$(basename "$f")"
  if [ -f "$selected" ] ; then
    dir="${selected%.*}"
    filename="$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 8)_$selected"
    command mkdir -pv "$dir"
    command mv -i "$selected" "$dir/$filename"
    cd "$dir" > /dev/null
    case "$filename" in
      *.tar)                       tar xvf "$filename"     ;;
      *.tar.gz | *.tgz)            tar xvzf "$filename"    ;;
      *.tar.xz | *.xz)             tar xvJf "$filename"    ;;
      *.tar.bz2 | *.tbz | *.tbz2)  tar xvjf "$filename"    ;;
      *.bz2)                       bunzip2 "$filename"     ;;
      *.gz)                        gunzip "$filename"      ;;
      *.zip)                       unzip "$filename"       ;;
      *.rar)                       unrar x "$filename"     ;;
      *.Z)                         uncompress "$filename"  ;;
      *.7z)                        7z x "$filename"        ;;
      *)                           echo "Unable to extract '$filename'" ;;
    esac
    cd .. > /dev/null
    command mv -n "$dir/$filename" "$selected"
  else
    tar czvf "$selected.tar.gz" -C "$selected" .
  fi
}}

# vim: filetype=bash
