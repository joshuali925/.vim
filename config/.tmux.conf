# true color
set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",screen-256color:Tc"

# set -g default-terminal "rxvt-unicode-256color"

# set -g default-terminal 'tmux-256color'
# set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

# set -g default-terminal "tmux-256color"
# set -ga terminal-overrides ",*256col*:Tc"


# set -g mode-mouse on  # for older version
set -g mouse on
set -g mode-keys vi

set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on
set -g aggressive-resize on
set -g word-separators " @\"'=()[]{}<>,"
set -g mode-style 'bg=colour238'

set -g prefix C-s
unbind C-b

bind ? list-keys
bind C-l send-keys -R \; clear-history
bind r command-prompt -I '#W' 'rename-window "%%"'  # <prefix>$ to rename session
bind j choose-window 'join-pane -h -s "%%"'  # move a pane to current pane, <prefix>! to break pane
bind J choose-session 'run-shell "yes | head -n #{session_windows} | xargs -I {} -n 1 tmux move-window -s %%"'  # merge a session into current one

bind k confirm kill-pane
bind K confirm kill-session
bind C-r source-file ~/.tmux.conf \; display 'Reloaded'

bind -r Up resize-pane -U 2
bind -r Down resize-pane -D 2
bind -r Left resize-pane -L 2
bind -r Right resize-pane -R 2

bind -r H swap-pane -U
bind -r L swap-pane -D

bind C-s last-window
bind -n S-Left previous-window
bind -n S-Right next-window
bind S-Left switch-client -p  # previous session
bind S-Right switch-client -n  # next session
bind ` split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
bind b run-shell -b 'bash ~/.vim/config/fzf/fzf-panes.tmux new_window'

bind -r C-Left swap-window -t -1 \; select-window -t -1
bind -r C-Right swap-window -t +1 \; select-window -t +1

bind v split-window -h -c '#{pane_current_path}'
bind h split-window -v -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'
bind -r = next-layout
bind \\ if-shell '[ #{pane_index} -eq 1 ]' 'swap-pane -s "!"' 'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'  # swap current pane with top left pane

bind C-c copy-mode
bind C-u copy-mode -e \; send-keys -X top-line \; send-keys -X end-of-line
bind p paste-buffer
bind P choose-buffer
bind / copy-mode -e \; send-keys ?
bind -T copy-mode-vi / command-prompt -i -p 'search down' 'send -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ? command-prompt -i -p 'search up' 'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi WheelUpPane send-keys -X -N 1 scroll-up
bind -T copy-mode-vi WheelDownPane send-keys -X -N 1 scroll-down
bind -T copy-mode-vi 0 if-shell -F '#{copy_cursor_x}' 'send-keys -X start-of-line' 'send-keys -X back-to-indentation'
bind -T copy-mode-vi - send-keys -X end-of-line
bind -T copy-mode-vi u send-keys -X halfpage-up
bind -T copy-mode-vi d send-keys -X halfpage-down
bind -T copy-mode-vi v if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X begin-selection'
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle \; send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi Y send-keys -X copy-end-of-line
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear
bind -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection
bind -T copy-mode-vi Space if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X select-word'
bind -T copy-mode-vi c send-keys -X clear-selection
bind -T copy-mode-vi a send-keys -X cancel
bind -T copy-mode-vi Escape if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X cancel'

bind -T copy-mode-vi g switch-client -T copyModeMultiKey_g
bind -T copyModeMultiKey_g g send-keys -X history-top
bind -T copyModeMultiKey_g f if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe "awk -F: '{line=($2==\"\")?\"\":\" +\"$2; print \"$EDITOR \" $1 line}' | xargs -I {} tmux new-window -c '#{pane_current_path}' {}"  # edit file or file:line under cursor or selection
bind -T copyModeMultiKey_g x if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -c "#{pane_current_path}" "open \"{}\""'
bind -T copyModeMultiKey_g o if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'sed -e "s/:$//" | xargs -I {} tmux new-window -c "#{pane_current_path}" "code --goto \"{}\""'

bind -T copy-mode-vi i switch-client -T copyModeMultiKey_i
bind -T copyModeMultiKey_i w send-keys -X select-word
bind -T copyModeMultiKey_i W send-keys -X clear-selection \; send-keys -X previous-space \; send-keys -X begin-selection \; send-keys -X next-space-end
bind -T copyModeMultiKey_i b send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ( send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ) send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i B send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \{ send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \} send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i [ send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i ] send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i < send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i > send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i ` send-keys -X clear-selection \; send-keys -X jump-to-backward '`' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '`'
bind -T copyModeMultiKey_i \' send-keys -X clear-selection \; send-keys -X jump-to-backward "'" \; send-keys -X begin-selection \; send-keys -X jump-to-forward "'"
bind -T copyModeMultiKey_i \" send-keys -X clear-selection \; send-keys -X jump-to-backward '"' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '"'

bind -T copy-mode-vi z switch-client -T copyModeMultiKey_z
bind -T copyModeMultiKey_z z if-shell '[ $(((#{pane_height}-1)/2)) -ne #{copy_cursor_y} ]' {
  if-shell '[ $(((#{pane_height}-1)/2)) -gt #{copy_cursor_y} ]' {
    run-shell 'tmux send-keys -X -N $(((#{pane_height}-1)/2-#{copy_cursor_y})) scroll-up'
    run-shell 'tmux send-keys -X -N $(((#{pane_height}-1)/2-#{copy_cursor_y})) cursor-down'
  } {
    run-shell 'tmux send-keys -X -N $((#{copy_cursor_y}-(#{pane_height}-1)/2)) scroll-down'
    if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N $((#{copy_cursor_y}-(#{pane_height}-1)/2)) cursor-up"'
  }
}
bind -T copyModeMultiKey_z t if-shell '[ #{copy_cursor_y} -gt 0 ]' {
  run-shell 'tmux send-keys -X -N #{copy_cursor_y} scroll-down'
  if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N #{copy_cursor_y} cursor-up"'
}
bind -T copyModeMultiKey_z b if-shell '[ $((#{pane_height}-1)) -gt #{copy_cursor_y} ]' {
  run-shell 'tmux send-keys -X -N $((#{pane_height}-1-#{copy_cursor_y})) scroll-up'
  run-shell 'tmux send-keys -X -N $((#{pane_height}-1-#{copy_cursor_y})) cursor-down'
}

unbind -n DoubleClick1Pane
unbind -T copy-mode-vi DoubleClick1Pane
# tmux < 3.2 use DoubleClick1Pane and run-shell 'sleep .1s'
bind -n SecondClick1Pane \
    select-pane \; \
    copy-mode -e \; \
    send-keys -X select-word \; \
    run-shell -d 0.1 \; \
    send-keys -X copy-selection-no-clear  # wait so it copies to system clipboard
bind -T copy-mode-vi SecondClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-selection-no-clear
bind -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-selection-no-clear

# =======================================================
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
# =======================================================

# # comment out this paragraph if using tpm plugins
# set -g display-time 3000
# set -sg escape-time 0
# set-window-option -g automatic-rename off   #disable window title auto-rename
# set-option -g buffer-limit 16               #Number of copy buffers.
# set -g history-limit 65535
# # set -g status-utf8 on
# set -g status-bg black
# set -g status-fg blue
# set -g status-left "#[fg=colour251,bg=black][#S]#[default]"
# setw -g clock-mode-colour green
# setw -g clock-mode-style 12
# setw -g window-status-current-format "#[fg=black,bg=colour167]❰#[bold,fg=black,bg=colour45] #I #W "
# setw -g window-status-separator ""
# setw -g window-status-format "#[fg=colour243,bg=colour237,bold]❰#[fg=colour250,bg=colour240] #I #W "
# set -g status-right-length 50
# # cpu load
# set -g status-right "#[fg=black,bg=colour113,bold]❰#[fg=black,bg=colour114,bold]"
# set -ga status-right " U:#(uptime|sed 's/.*:.//'|sed 's/,//g') "
# # ram usage
# set -ga status-right "#[fg=black,bg=colour113,bold]❰#[fg=black,bg=colour114,bold]"
# set -ga status-right " M:#(free|awk 'NR==2{printf \"%.2f\", 100*$3/$2}')% "
# # datetime
# set -ga status-right "#[fg=black,bg=colour113,bold]❰#[fg=black,bg=colour114,bold] %m/%d %I:%M %p#[default]"
# # refresh every 10 seconds
# set -g status-interval 10
# # setw -g window-status-activity-bg colour23
# # setw -g window-status-activity-fg colour239
# set -g visual-activity on
# setw -g monitor-activity on
# # set -g message-bg "default"            # Color of the message bar.
# # set -g message-attr "bold"          # Style attributes for status line messages.
# set -g display-panes-active-colour blue #highlight active panel border with blue
# set -g display-panes-colour colour250 #orange
# # pane border
# # set -g pane-border-fg colour235 #base02
# # set -g pane-active-border-fg colour240 #base01
# # tmux 2.8+
# set -g message-style "bold"          # Style attributes for status line messages.
# set -g pane-border-style "fg=colour235" #base02
# set -g pane-active-border-style "fg=colour240" #base01

# TPM
if 'test ! -d ~/.tmux/plugins/tpm' \
   'run "git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins"'

set -g @plugin 'tmux-plugins/tpm'             # <prefix>I install, <prefix>U upgrade
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'  # <prefix>S save, <prefix>R restore
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
set -g @plugin 'sainnhe/tmux-fzf'             # <prefix><C-f>
TMUX_FZF_LAUNCH_KEY='C-f'
set -g @plugin 'jbnicolai/tmux-fpp'           # <prefix>f
set -g @plugin 'laktak/extrakto'              # <prefix><C-p>
set -g @extrakto_key 'C-p'
set -g @extrakto_split_size 12
set -g @extrakto_insert_key 'enter'
set -g @extrakto_copy_key 'tab'
set -g @extrakto_clip_tool_run 'fg'
set -g @plugin 'dracula/tmux'
set -g status-justify left
set -g @dracula-show-powerline true
set -g @dracula-show-left-icon session
set -g @dracula-show-fahrenheit false
set -g @dracula-show-timezone false
set -g @dracula-show-network false
set -g @dracula-cpu-usage true
set -g @dracula-ram-usage true
set -g @dracula-show-weather false

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
