# true color
# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",*256col*:Tc"

# breaks nvim home/end
# set -g default-terminal "xterm-256color"
# set -ga terminal-overrides ",xterm-256color:Tc"

# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",screen-256color:Tc"

# set -g default-terminal "rxvt-unicode-256color"

# set -g default-terminal 'tmux-256color'
# set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

# needs tmux-256color terminfo
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"

# undercurl
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

set -s escape-time 0
set -s set-clipboard on
set -g mouse on
set -g mode-keys vi
set -g status-keys emacs
set -g base-index 1  # window starts at 1, pane starts at 0, <prefix>q to show index
set -g renumber-windows on
set -g aggressive-resize on
set -g word-separators " \"'=()[]{}<>,"
set -g mode-style 'bg=colour238'
set -g repeat-time 1000
set -g display-time 4000
set -g status-interval 5
set -g monitor-bell on
set -g visual-bell on
set -g bell-action other
set -g focus-events on
set -g history-limit 65535
# set -g default-shell /usr/bin/zsh
# set -g automatic-rename on
# set -g automatic-rename-format '#{b:pane_current_path}'

unbind C-b
set -g prefix C-s
bind C-s send-prefix

bind ? list-keys
bind S set synchronize-panes
bind C-l send-keys -R \; clear-history
bind r command-prompt -I '#W' 'rename-window "%%"'  # <prefix>$ to rename session
bind j choose-window 'join-pane -v -s "%%"'  # move a pane to current pane, <prefix>! to break pane
bind J choose-session 'run-shell "yes | head -n #{session_windows} | xargs -I {} -n 1 tmux move-window -s %%"'  # merge a session into current one

bind k confirm kill-pane
bind K confirm kill-session
bind C-r source-file ~/.tmux.conf \; refresh-client \; display 'Reloaded config'

bind -r H swap-pane -U
bind -r L swap-pane -D
bind m if-shell -F '#{pane_marked_set}' 'swap-pane; select-pane -M' 'select-pane -m'  # <prefix>m to mark, again to swap
bind \\ if-shell '[ #{pane_index} -eq 0 ]' 'swap-pane -s "!"' 'select-pane -t:.0 ; swap-pane -d -t 0 -s "!"'  # swap current pane with top left pane

bind -n M-p previous-window
bind -n M-n next-window
bind C-k switch-client -p  # previous session
bind C-j switch-client -n  # next session
bind -n S-Left previous-window
bind -n S-Right next-window
bind S-Left switch-client -p  # previous session
bind S-Right switch-client -n  # next session
bind ` split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"  # switch session
bind b run-shell -b 'bash ~/.vim/config/fzf/fzf-panes.tmux new_window'
bind w command-prompt -p 'Write pane history to file:' -I '#{pane_current_path}/tmux_#{session_name}_#{window_activity}.log' 'capture-pane -J -S -; save-buffer %1; delete-buffer; new-window "$EDITOR %1"'
bind C-t display-popup -d '#{pane_current_path}' -h 90% -w 95% -E 'btop'

bind -n WheelUpPane if-shell -F '#{mouse_any_flag}' 'send-keys -M' "if-shell -F '#{alternate_on}' 'send-keys up' \"if-shell -F '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'\""
bind -n WheelDownPane if-shell -F '#{mouse_any_flag}' 'send-keys -M' 'if-shell -F "#{alternate_on}" "send-keys down" "send-keys -M"'

bind -r C-p swap-window -t -1 \; select-window -t -1
bind -r C-n swap-window -t +1 \; select-window -t +1
bind -r C-Left swap-window -t -1 \; select-window -t -1
bind -r C-Right swap-window -t +1 \; select-window -t +1

bind -n M-1 select-window -t :=1
bind -n M-2 select-window -t :=2
bind -n M-3 select-window -t :=3
bind -n M-4 select-window -t :=4
bind -n M-5 select-window -t :=5
bind -n M-6 select-window -t :=6
bind -n M-7 select-window -t :=7
bind -n M-8 select-window -t :=8
bind -n M-9 select-window -t :=9
bind -n M-0 select-window -t :$

bind v split-window -h -c '#{pane_current_path}'
bind h split-window -v -c '#{pane_current_path}'
bind o if-shell '[ $((2*#{pane_width}-5*#{pane_height})) -lt 0 ]' 'split-window -v -c "#{pane_current_path}"' 'split-window -h -c "#{pane_current_path}"'
bind O run-shell 'tmux new-window -a -c "#{pane_current_path}" \; split-window -d -h -c "#{pane_current_path}" \; split-window -f -b -v -c "#{pane_current_path}" \; split-window -d -h -c "#{pane_current_path}"'
bind C-o display-popup -d '#{pane_current_path}' -h 90% -w 95% -E 'lf -last-dir-path="$HOME/.cache/lf_dir"'
bind c new-window -a -c '#{pane_current_path}'
bind C command-prompt -p 'New Session:' 'new-session -A -s "%%"'
bind n run-shell 'tmux rename-window "#{b:pane_current_path}"'
bind -r = next-layout

bind C-c copy-mode
bind C-u copy-mode -e
bind p paste-buffer
bind P choose-buffer
bind / copy-mode -e \; send-keys ?
bind -T copy-mode-vi / command-prompt -i -p '(search down)' 'send-keys -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ? command-prompt -i -p '(search up)' 'send-keys -X search-backward-incremental "%%%"'
bind -T copy-mode-vi WheelUpPane send-keys -X -N 1 scroll-up
bind -T copy-mode-vi WheelDownPane send-keys -X -N 1 scroll-down
bind -T copy-mode-vi : command-prompt
bind -T copy-mode-vi 0 if-shell -F '#{copy_cursor_x}' 'send-keys -X start-of-line' 'send-keys -X back-to-indentation'
bind -T copy-mode-vi - send-keys -X end-of-line
bind -T copy-mode-vi u send-keys -X halfpage-up
bind -T copy-mode-vi d send-keys -X halfpage-down
bind -T copy-mode-vi v if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X begin-selection'
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle \; send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi Y send-keys -X copy-end-of-line-and-cancel
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear
bind -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection
bind -T copy-mode-vi c send-keys -X clear-selection
bind -T copy-mode-vi a send-keys -X cancel
bind -T copy-mode-vi Escape if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X cancel'
bind -T copy-mode-vi C-o display-popup -d '#{pane_current_path}' -h 90% -w 95% -E 'lf -last-dir-path="$HOME/.cache/lf_dir"'

bind -T copy-mode-vi g switch-client -T copyModeMultiKey_g
bind -T copyModeMultiKey_g g send-keys -X history-top
bind -T copyModeMultiKey_g f if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe "awk -F: -vNEXTLINE=\"$(tmux capture-pane -p -S $((#{copy_cursor_y} - #{scroll_position} + 1)) -E $((#{copy_cursor_y} - #{scroll_position} + 1)) | grep -o '^[0-9]\\+:')\" '{if($2!=\"\") line=\" +\"$2; else if(NEXTLINE!=\"\") line=\" +\"NEXTLINE; else line=\"\"; print \"$EDITOR \" $1 line}' | xargs -I {} tmux new-window -a -c '#{pane_current_path}' {}"  # edit file or file:line under cursor or selection, also goes to line if next line starts with "<number>:" (from ripgrep results)
bind -T copyModeMultiKey_g x if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; if-shell 'test -n "$SSH_CLIENT"' 'send-keys -X copy-selection' "send-keys -X pipe 'xargs -I {} tmux new-window -c \"#{pane_current_path}\" \"open \\\"{}\\\"\"'"
bind -T copyModeMultiKey_g o if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'sed -e "s/:$//" | xargs -I {} tmux new-window -c "#{pane_current_path}" "code --goto \"{}\""'

bind -T copy-mode-vi i switch-client -T copyModeMultiKey_i
bind -T copyModeMultiKey_i w send-keys -X select-word
bind -T copyModeMultiKey_i W send-keys -X clear-selection \; send-keys -X previous-space \; send-keys -X begin-selection \; send-keys -X next-space-end
bind -T copyModeMultiKey_i b send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ( send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ) send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i B send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \{ send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \} send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i [ send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i ] send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i < send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i > send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i ` send-keys -X clear-selection \; send-keys -X jump-to-backward '`' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '`'
bind -T copyModeMultiKey_i \' send-keys -X clear-selection \; send-keys -X jump-to-backward "'" \; send-keys -X begin-selection \; send-keys -X jump-to-forward "'"
bind -T copyModeMultiKey_i \" send-keys -X clear-selection \; send-keys -X jump-to-backward '"' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '"'
bind -T copyModeMultiKey_i l send-keys -X clear-selection \; send-keys -X back-to-indentation \; send-keys -X begin-selection \; send-keys -X end-of-line \; send-keys -X cursor-left \; send-keys -X other-end

bind -T copy-mode-vi K switch-client -T copyModeMultiKey_K
bind -T copyModeMultiKey_K a if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -c "#{pane_current_path}" "git add \"{}\""' \; display 'git add'
bind -T copyModeMultiKey_K u if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -c "#{pane_current_path}" "git reset \"{}\""' \; display 'git reset'
bind -T copyModeMultiKey_K s if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux display-popup -d "#{pane_current_path}" "git status \"{}\"; read"'
bind -T copyModeMultiKey_K d if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -a -c "#{pane_current_path}" "git diff \"{}\" | delta --line-numbers"'

bind -T copy-mode-vi z switch-client -T copyModeMultiKey_z
bind -T copyModeMultiKey_z z if-shell '[ $(((#{pane_height}-1)/2)) -ne #{copy_cursor_y} ]' {
  if-shell '[ $(((#{pane_height}-1)/2)) -gt #{copy_cursor_y} ]' {
    run-shell 'tmux send-keys -X -N $(((#{pane_height}-1)/2-#{copy_cursor_y})) scroll-up'
    run-shell 'tmux send-keys -X -N $(((#{pane_height}-1)/2-#{copy_cursor_y})) cursor-down'
  } {
    run-shell 'tmux send-keys -X -N $((#{copy_cursor_y}-(#{pane_height}-1)/2)) scroll-down'
    if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N $((#{copy_cursor_y}-(#{pane_height}-1)/2)) cursor-up"'
  }
}
bind -T copyModeMultiKey_z t if-shell '[ #{copy_cursor_y} -gt 0 ]' {
  run-shell 'tmux send-keys -X -N #{copy_cursor_y} scroll-down'
  if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N #{copy_cursor_y} cursor-up"'
}
bind -T copyModeMultiKey_z b if-shell '[ $((#{pane_height}-1)) -gt #{copy_cursor_y} ]' {
  run-shell 'tmux send-keys -X -N $((#{pane_height}-1-#{copy_cursor_y})) scroll-up'
  run-shell 'tmux send-keys -X -N $((#{pane_height}-1-#{copy_cursor_y})) cursor-down'
}

bind -T copy-mode-vi , send-keys -X jump-again
bind -T copy-mode-vi \; switch-client -T copyModeMultiKey_semicolon
bind -T copyModeMultiKey_semicolon , send-keys -X jump-reverse
bind -T copyModeMultiKey_semicolon / command-prompt -p '(regex search down)' 'send-keys -X search-forward "%%%"'
bind -T copyModeMultiKey_semicolon : command-prompt -p '(goto line)' 'send-keys -X goto-line "%%"'
bind -T copyModeMultiKey_semicolon f if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs basename | xargs -I {} tmux new-window -a -c "#{pane_current_path}" "fzf --query=\"{}\" --multi --bind=\"enter:execute($EDITOR {+} < /dev/tty)+abort\""'
bind -T copyModeMultiKey_semicolon w command-prompt -p 'Write pane history to file:' -I '#{pane_current_path}/tmux_#{session_name}_#{window_activity}.log' 'send-keys -X copy-selection; save-buffer %1; delete-buffer; new-window "$EDITOR %1"'
bind -T copy-mode-vi * if-shell -F '#{selection_active}' '' 'send-keys -X select-word'\; send-keys -X pipe 'xargs -0 tmux send-keys -X search-forward-text; tmux send-keys -X search-reverse'  # faster ;n but does not restore view, needs to keep 'search-reverse' in 'pipe' to work correctly
bind -T copyModeMultiKey_semicolon n {
  set-environment -gF TMUX_PREV_Y '#{copy_cursor_y}'
  if-shell -F '#{selection_active}' '' 'send-keys -X select-word'
  send-keys -X pipe 'xargs -0 tmux send-keys -X search-forward-text; tmux send-keys -X search-reverse'
  run-shell -d 0.2  # sometimes 0.2s is still not enough to update cursor
  set-environment -gF TMUX_POST_Y '#{copy_cursor_y}'
  if-shell '[ $(($TMUX_POST_Y-$TMUX_PREV_Y)) -gt 0 ]' {
    run-shell 'tmux send-keys -X -N $(($TMUX_POST_Y-$TMUX_PREV_Y)) scroll-down'
    if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N $(($TMUX_POST_Y-$TMUX_PREV_Y)) cursor-up"'
  }
  if-shell '[ $(($TMUX_POST_Y-$TMUX_PREV_Y)) -lt 0 ]' {
    run-shell 'tmux send-keys -X -N $(($TMUX_PREV_Y-$TMUX_POST_Y)) scroll-up'
    run-shell 'tmux send-keys -X -N $(($TMUX_PREV_Y-$TMUX_POST_Y)) cursor-down'
  }
}

unbind -n DoubleClick1Pane
unbind -T copy-mode-vi DoubleClick1Pane
bind -n SecondClick1Pane \
    select-pane \; \
    copy-mode -e \; \
    send-keys -X select-word \; \
    run-shell -d 0.1 \; \
    send-keys -X copy-selection-no-clear  # wait so it copies to system clipboard
bind -T copy-mode-vi SecondClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-selection-no-clear
bind -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-selection-no-clear

# Smart pane switching with awareness of Vim splits. See: https://github.com/aserowy/tmux.nvim
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'
bind -T copy-mode-vi 'M-h' resize-pane -L 1
bind -T copy-mode-vi 'M-j' resize-pane -D 1
bind -T copy-mode-vi 'M-k' resize-pane -U 1
bind -T copy-mode-vi 'M-l' resize-pane -R 1

if-shell 'test -n "$TMUX_NO_TPM"' {
  set -g clock-mode-style 12
  set -g status-fg 'colour253'
  set -g status-bg 'colour235'
  set -g window-status-separator ""
  set -g window-status-format '#[fg=colour255,bg=colour240] #I #W '
  set -g window-status-current-format '#[fg=colour255,bg=colour61] #I #W '
  set -g window-status-bell-style 'bold'
  set -g window-status-activity-style 'bold'
  set -g status-left '#[fg=colour237]#{?client_prefix,#[bg=colour228]#[bold],#[bg=colour114]} #S  #[default]'
  set -g status-right-length 80
  set -g status-right "#[fg=colour237,bg=colour178,bold] #(uptime | sed 's/.*:.//' | sed 's/,//g') #[fg=colour237,bg=colour117,bold] #(free | awk 'NR==2{printf \"%%.2f%%%%\", 100*$3/$2}') #[fg=colour237,bg=colour114,bold] %m/%d %I:%M %p #[default]"
  set -g pane-border-style 'fg=colour235'
  set -g pane-active-border-style 'fg=colour240'
  set -g display-panes-active-colour 'red'
  set -g display-panes-colour 'blue'
  set -g message-style 'fg=colour253,bg=colour235'
  if-shell 'test -n "$SSH_CLIENT"' 'set -ga status-right "#[fg=colour215,bg=colour239] #h #[fg=colour253,bg=colour124]#{?pane_synchronized,  panes ,}#[default]"' 'set -ga status-right "#[fg=colour253,bg=colour124]#{?pane_synchronized,  panes ,}#[default]"'
} {
  # TPM
  if-shell 'test ! -d ~/.tmux/plugins/tpm' 'run "git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm --depth=1 && ~/.tmux/plugins/tpm/bin/install_plugins"'

  set -g @plugin 'tmux-plugins/tpm'             # <prefix>I install, <prefix>U upgrade
  set -g @plugin 'tmux-plugins/tmux-resurrect'  # <prefix>W save, <prefix>E restore
  set -g @resurrect-capture-pane-contents 'on'
  set -g @resurrect-save 'W'
  set -g @resurrect-restore 'E'
  set -g @resurrect-processes 'false'
  set -g @plugin 'sainnhe/tmux-fzf'             # <prefix><C-f>
  TMUX_FZF_LAUNCH_KEY='C-f'
  TMUX_FZF_ORDER='command|keybinding|session|window|pane|clipboard|process'
  set -g @plugin 'fcsonline/tmux-thumbs'        # <M-'>
  set -g @thumbs-bg-color '#383A57'
  set -g @thumbs-fg-color '#B695F3'
  set -g @thumbs-hint-bg-color '#383A57'
  set -g @thumbs-hint-fg-color '#F4BB78'
  set -g @thumbs-select-bg-color '#383A57'
  set -g @thumbs-select-fg-color '#85F789'
  set -g @thumbs-command 'tmux new-window -c "#{pane_current_path}" "$EDITOR \"{}\""'
  set -g @thumbs-upcase-command 'tmux set-buffer -- {} && tmux paste-buffer'
  set -g @thumbs-regexp-1 '[\w\-.%/]*\.[\w~]+'
  set -g @thumbs-reverse 'enabled'
  set -g @thumbs-unique 'enabled'
  set -g @plugin 'dracula/tmux'
  set -g @dracula-show-powerline 'true'
  set -g @dracula-show-flags 'true'
  set -g @dracula-show-left-icon 'session'
  set -g @dracula-plugins 'battery cpu-usage ram-usage'

  # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
  run '~/.tmux/plugins/tpm/tpm'

  bind -n "M-'" thumbs-pick
  # https://github.com/dracula/tmux/issues/49
  if-shell 'test -n "$SSH_CLIENT"' 'set -ga status-right "#[fg=#47445a,bg=#8be9fd]#[fg=#ffb86c,bg=#47445a] #h #[fg=#ffffff,bg=#bf340d]#{?pane_synchronized,  panes ,}#[default]"' 'set -ga status-right "#[fg=#ffffff,bg=#bf340d]#{?pane_synchronized,  panes ,}#[default]"'
}
