#!/usr/bin/env bash
set -eo pipefail

run() {
  while [[ $# -ne 0 ]]; do
    case $1 in
      --no-sec) shift; local nosec=1 ;;
      --debug) shift; export OPENSEARCH_JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 ;;
      --) shift; break ;;
      *) break ;;
    esac
  done

  if [[ -x bin/opensearch ]]; then
    if [[ -d plugins/opensearch-security ]]; then
      [[ -n "$nosec" ]] && exec ./bin/opensearch -Eplugins.security.disabled=true
      if [[ ! -f config/kirk.pem ]]; then
        OPENSEARCH_INITIAL_ADMIN_PASSWORD=myStrongPassword123@456 ./opensearch-tar-install.sh "$@" &
        pid=$!
        while ! curl -fsSL https://localhost:9200 -k -u admin:myStrongPassword123@456; do echo waiting for opensearch..; sleep 1; done
        # shellcheck disable=2016
        sed -i '/^admin:/,/^  hash:/ s/\(hash: \)".*"/\1"$2a$12$VcCDgh2NDk07JGN0rjGbM.Ad41qVR\/YFJcgHp0UGns5JDymv..TOG"/' config/opensearch-security/internal_users.yml
        bash plugins/opensearch-security/tools/securityadmin.sh -f config/opensearch-security/internal_users.yml -t internalusers -icl -nhnv -cacert config/root-ca.pem -cert config/kirk.pem -key config/kirk-key.pem
        kill $pid
      fi
    fi
    exec ./bin/opensearch "$@"
  fi

  local opts=(--host 0.0.0.0)
  if [[ -d plugins/securityDashboards ]] || [[ -d plugins/security-dashboards-plugin ]]; then
    if ! grep -q '^opensearch.hosts' config/opensearch_dashboards.yml; then
      # https://github.com/opensearch-project/OpenSearch-Dashboards/blob/c2ac4c8ae102a76df4258e8e871375299b6ad008/src/dev/build/tasks/os_packages/docker_generator/resources/bin/opensearch-dashboards-docker
      opts+=(--opensearch.hosts=https://localhost:9200 --opensearch.username=kibanaserver --opensearch.password=kibanaserver --opensearch.ssl.verificationMode=none --opensearch.requestHeadersWhitelist='["authorization", "securitytenant"]' --opensearch_security.multitenancy.enabled=true --opensearch_security.multitenancy.tenants.preferred='["Private", "Global"]' --opensearch_security.readonly_mode.roles='["kibana_read_only"]' --opensearch_security.cookie.secure=false)
    fi
  fi
  if [[ -x bin/opensearch-dashboards ]]; then
    exec ./bin/opensearch-dashboards "${opts[@]}" "$@"
  fi
  if [[ -f opensearch_dashboards.d.ts ]]; then
    exec yarn start --no-base-path --run-examples "${opts[@]}" "$@"
  fi
}

download() {
  if [[ $# -eq 0 ]]; then echo "Usage: ${0##*/} get <3-digit-version> [filter]" >&2; return 1; fi
  ver() { awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }' <<<"$*"; }

  local version=$1 arch=$([[ $(uname -m) =~ (x86_64|amd64) ]] && echo x64 || echo arm64) url selected
  local core=('opensearch' 'opensearch-dashboards') es=('elasticsearch' 'kibana') opensearch_plugin=('opensearch-security' 'opensearch-sql' 'opensearch-reports-scheduler' 'opensearch-observability' 'opensearch-job-scheduler' 'opensearch-alerting' 'opensearch-anomaly-detection' 'opensearch-ml' 'opensearch-notifications' 'opensearch-notifications-core' 'opensearch-index-management' 'opensearch-knn' 'opensearch-flow-framework' 'opensearch-skills')
  local artifacts=("${core[@]}" "${opensearch_plugin[@]}" "${es[@]}")

  selected=$(printf "%s\n" "${artifacts[@]}" | fzf --query="$2" --select-1 --bind='tab:down,btab:up') || return 1
  if [[ ${es[*]} = *${selected}* ]]; then
    [[ $arch = x64 ]] && arch=x86_64 || arch=aarch64
    url="https://artifacts.elastic.co/downloads/$selected/$selected-oss-$version-linux-$arch.tar.gz"
  elif [[ ${core[*]} = *${selected}* ]]; then
    if [[ $(ver "$version") -gt $(ver "$(curl -fsSL https://opensearch.org/ | rg -o 'Current Version: ([\d\.]+)' -r '$1')") ]]; then
      url="https://ci.opensearch.org/ci/dbc/distribution-build-$selected/$version/latest/linux/$arch/tar/dist/$selected/$selected-$version-linux-$arch.tar.gz"
      printf "\033[0;36m%s\033[0m\n" "Manifest: https://ci.opensearch.org/ci/dbc/distribution-build-$selected/$version/latest/linux/$arch/tar/dist/$selected/manifest.yml" >&2
    else
      url="https://artifacts.opensearch.org/releases/bundle/$selected/$version/$selected-$version-linux-$arch.tar.gz"
    fi
  elif [[ ${opensearch_plugin[*]} = *${selected}* ]]; then
    if [[ $(ver "$version") -ge $(ver 1.3.2) ]]; then  # url changed after 1.3.2
      url="https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/$version/latest/linux/$arch/tar/builds/opensearch/plugins/$selected-$version.0.zip"
    else
      url="https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/$version/latest/linux/$arch/builds/opensearch/plugins/$selected-$version.0.zip"
    fi
  fi

  printf "\033[0;36m%s\033[0m\n" "Downloading from: $url" >&2
  curl -fLO "$url"
}

get_endpoint() {
  if [[ -n "$endpoint" ]]; then echo "$endpoint"; return 0; fi
  if curl -fsSL localhost:9200 > /dev/null 2>&1; then
    echo http://localhost:9200
  else
    echo https://admin:admin@localhost:9200
  fi
}

query() {
  curl -s -k -XPOST -H 'Content-Type: application/json' "$(get_endpoint)/_plugins/_$1" -d "$(jq -n --arg query "${*:2}" '$ARGS.named')" | jq -C | less -RiMXF
}

request() {
  local args=() method=$1 path="/${2#/}"
  shift 2
  case $method in
    post) args+=(-XPOST -H 'Content-Type: application/json') ;;
    put) args+=(-XPUT -H 'Content-Type: application/json') ;;
    *) args+=(-X"${method^^}") ;;
  esac
  if [[ $1 = \{*\} ]]; then args+=(-d "$1"); shift; fi
  curl -s -k "${args[@]}" "$(get_endpoint)$path" "$@"
}

main() {
  case $1 in
    run|download) "$1" "${@:2}" ;;
    d) download "${@:2}" ;;
    sql*|ppl*) query "$@" ;;
    get|put|post) request "$@" ;;
    *) echo "Usage: ${0##*/} run [args...] | download <3-digit-version> [filter] | {sql|ppl}[/path] <query> | {get|post|put} [path] [<body> [args...]]" >&2; exit 1 ;;
  esac
}

main "$@"
